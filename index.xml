<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Making the Ordinary Extraordinary With Data Together</title>
    <link>https://sumant-28.github.io/</link>
    <description>Recent content on Making the Ordinary Extraordinary With Data Together</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 20 Mar 2025 13:07:57 +1300</lastBuildDate>
    <atom:link href="https://sumant-28.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Replacing QuickSight With Streamlit Is Like Opening Pandoras Box</title>
      <link>https://sumant-28.github.io/posts/streamlitec2/</link>
      <pubDate>Thu, 20 Mar 2025 13:07:57 +1300</pubDate>
      <guid>https://sumant-28.github.io/posts/streamlitec2/</guid>
      <description>&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;&#xA;&lt;p&gt;In my prior blog post I wrote about how I was paying too much for Glue but now I want to draw attention to paying too much for QuickSight. While my Glue bill felt like being shot in the chest QuickSight is like a death by a thousand cuts. On a home project like this I would hope to pay $0 but theres no such thing as a free lunch. Overall I am happy with what I have chosen to implement for now and will discuss later on suggestions for further improvement.&lt;/p&gt;</description>
    </item>
    <item>
      <title>The AWS Bankruptcy Triggering Bill Rite of Passage</title>
      <link>https://sumant-28.github.io/posts/awscosts/</link>
      <pubDate>Thu, 20 Feb 2025 23:18:42 +1300</pubDate>
      <guid>https://sumant-28.github.io/posts/awscosts/</guid>
      <description>&lt;p&gt;This post deals with a common theme in the journey of learning cloud data infrastructure and how it manifested for me while trying to learn AWS.&lt;/p&gt;&#xA;&lt;p&gt;When I saw prior examples of people relaying stories of spiralling costs in AWS it came from spinning instances of EC2 but my story of how it happened involved using the more harmless seeming Glue.&lt;/p&gt;&#xA;&lt;h1 id=&#34;how-it-happened&#34;&gt;How it happened&lt;/h1&gt;&#xA;&lt;p&gt;It started when trying to do an ETL job that was just complicated enough to not be possible with the visual interface. Here I have to confess some of the error was on my part because I named my tables incorrectly in a hurry so I for some reason thought I needed to unnest, convert data types and resolve choice all in the same job while in reality I only needed to do two of those things.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Apple Health Data Lake in AWS â€“ Odds and Ends</title>
      <link>https://sumant-28.github.io/posts/datalakept2/</link>
      <pubDate>Mon, 20 Jan 2025 14:29:11 +1300</pubDate>
      <guid>https://sumant-28.github.io/posts/datalakept2/</guid>
      <description>&lt;p&gt;In my previous blog post I described the process of using my Apple Health (AH) records collected over the course of many years and migrating it to a data lake. I omitted some details which I will address here. I may write another post later if I deem it worthwhile.&lt;/p&gt;&#xA;&lt;h1 id=&#34;data-completeness&#34;&gt;Data completeness&lt;/h1&gt;&#xA;&lt;p&gt;The earlier post only dealt with architecture and daily incremental ingest. However by itself it is almost useless to me as an end user. The real power of analytics comes with combining the most recent data with records collected years ago to make meaningful comparisons.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Implementing an Apple Health data lake using AWS</title>
      <link>https://sumant-28.github.io/posts/awsdatalake/</link>
      <pubDate>Fri, 20 Dec 2024 00:27:50 +1300</pubDate>
      <guid>https://sumant-28.github.io/posts/awsdatalake/</guid>
      <description>&lt;p&gt;In the past I developed a solution to examine the Apple Health &lt;a href=&#34;https://github.com/sumant-28/AppleHealthParser.jl&#34;&gt;data download&lt;/a&gt; exported as an xml file. Upon reflection that only served as a stepping stone to implementing a personal data lake. A serverless application hosted in the cloud allows for much more powerful use of the data with real time insights to drive day to day decision making.&lt;/p&gt;&#xA;&lt;p&gt;I have implemented the following solution in Amazon Web Services (AWS) which will form the basis of this blog post.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>https://sumant-28.github.io/googled341b2d1ca9df3ee/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://sumant-28.github.io/googled341b2d1ca9df3ee/</guid>
      <description>google-site-verification: googled341b2d1ca9df3ee.html</description>
    </item>
  </channel>
</rss>
